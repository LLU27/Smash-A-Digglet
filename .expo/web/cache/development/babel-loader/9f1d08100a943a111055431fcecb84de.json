{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Square from \"./Square\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { clearScore } from \"../redux/scoreReducer\";\nimport HomeScreen from \"./HomeScreen\";\nimport { Audio } from \"expo-av\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar GameBoard = function GameBoard() {\n  var _useState = useState(10),\n    _useState2 = _slicedToArray(_useState, 2),\n    timeLeft = _useState2[0],\n    setTimeLeft = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isGameOver = _useState4[0],\n    setGameOver = _useState4[1];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    startGame = _useState6[0],\n    setStartGame = _useState6[1];\n  var score = useSelector(function (state) {\n    return state.scoreReducer.score;\n  });\n  var status = useSelector(function (state) {\n    return state.gameStatusReducer.status;\n  });\n  var dispatch = useDispatch();\n\n  console.log('status,', status);\n  useEffect(function () {\n    if (!timeLeft) {\n      return setGameOver(true);\n    } else {\n      if (status) {\n        var timerId = setInterval(function () {\n          setTimeLeft(timeLeft - 1);\n        }, 1000);\n        return function () {\n          return clearInterval(timerId);\n        };\n      }\n    }\n  }, [timeLeft, status]);\n  function restartGame() {\n    setGameOver(false);\n    setTimeLeft(10);\n    dispatch(clearScore());\n  }\n  return !status ? _jsx(HomeScreen, {}) : !isGameOver ? _jsxs(ImageBackground, {\n    style: styles.container,\n    source: require(\"../assets/Grass_Type.png\"),\n    children: [_jsx(View, {\n      children: _jsx(Image, {\n        source: require(\"../assets/pokemon_font.png\"),\n        style: {\n          top: 90\n        }\n      })\n    }), _jsxs(Text, {\n      style: styles.time,\n      children: [\"Time Remaining : \", timeLeft, \" seconds\"]\n    }), _jsxs(Text, {\n      style: styles.score,\n      children: [\"Your Smashed : \", score, \" Moles!\"]\n    }), _jsxs(View, {\n      style: styles.game,\n      children: [_jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {})]\n    })]\n  }) : _jsxs(View, {\n    style: styles.gameOverContainer,\n    children: [_jsx(Image, {\n      source: require(\"../assets/gameover.png\")\n    }), _jsxs(Text, {\n      style: styles.finalScore,\n      children: [\"You Smashed \", score, \" Moles!\"]\n    }), _jsx(TouchableOpacity, {\n      style: styles.restartBtn,\n      onPress: restartGame,\n      children: _jsx(Image, {\n        source: require(\"../assets/playagain.png\")\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\"\n  },\n  game: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    width: 300\n  },\n  time: {\n    marginBottom: 10,\n    marginTop: 90,\n    fontWeight: \"bold\",\n    fontSize: 20,\n    color: \"red\"\n  },\n  score: {\n    fontWeight: \"bold\",\n    fontSize: 20,\n    color: \"yellow\"\n  },\n  gameOverContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"black\"\n  },\n  finalScore: {\n    color: \"yellow\",\n    fontSize: 20\n  },\n  restartBtn: {\n    backgroundColor: \"yellow\",\n    margin: 20\n  },\n  playAgain: {\n    fontSize: 30\n  }\n});\nexport default GameBoard;","map":{"version":3,"names":["Square","React","useEffect","useState","useSelector","useDispatch","clearScore","HomeScreen","Audio","GameBoard","timeLeft","setTimeLeft","isGameOver","setGameOver","startGame","setStartGame","score","state","scoreReducer","status","gameStatusReducer","dispatch","console","log","timerId","setInterval","clearInterval","restartGame","styles","container","require","top","time","game","gameOverContainer","finalScore","restartBtn","StyleSheet","create","flex","backgroundColor","alignItems","flexDirection","flexWrap","width","marginBottom","marginTop","fontWeight","fontSize","color","justifyContent","margin","playAgain"],"sources":["/Users/llu/Desktop/solo/Smash-A-Digglet/components/GameBoard.js"],"sourcesContent":["import {\n  View,\n  Text,\n  StyleSheet,\n  ImageBackground,\n  Image,\n  TouchableOpacity,\n} from \"react-native\";\nimport Square from \"./Square\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { clearScore } from \"../redux/scoreReducer\";\nimport HomeScreen from \"./HomeScreen\";\nimport { Audio } from \"expo-av\";\n\nconst GameBoard = () => {\n  const [timeLeft, setTimeLeft] = useState(10);\n  const [isGameOver, setGameOver] = useState();\n  const [startGame,setStartGame] = useState()\n  // const [sound, setSound] = useState();\n  const score = useSelector((state) => state.scoreReducer.score);\n  const status =useSelector((state)=>state.gameStatusReducer.status)\n  const dispatch = useDispatch();\n\n  // async function playSound() {\n  //   console.log(\"Loading Sound\");\n  //   const { sound } = await Audio.Sound.createAsync(\n  //     require(\"../assets/pokemon-battle.mp3\")\n  //   );\n  //   setSound(sound);\n  //   console.log(\"Playing Sound\");\n  //   await sound.playAsync();\n  // }\n\n  // useEffect(() => {\n  //   return sound\n  //     ? () => {\n  //         console.log(\"Unloading Sound\");\n  //         sound.unloadAsync();\n  //       }\n  //     : undefined;\n  // }, [sound]);\n\n\nconsole.log('status,',status)\n\n\n  useEffect(() => {\n    if (!timeLeft) {\n      return setGameOver(true);\n    } else {\n      //need logic to make it start when app starts\n        if(status){\n          const timerId = setInterval(() => {\n            setTimeLeft(timeLeft - 1);\n          }, 1000);\n          return () => clearInterval(timerId);\n        }\n    }\n  }, [timeLeft,status]);\n\n  function restartGame() {\n    setGameOver(false);\n    setTimeLeft(10);\n    dispatch(clearScore());\n  }\n\n  return !status ? <HomeScreen /> :!isGameOver ? (\n    <ImageBackground\n      style={styles.container}\n      source={require(\"../assets/Grass_Type.png\")}\n    >\n      <View>\n        <Image\n          source={require(\"../assets/pokemon_font.png\")}\n          style={{ top: 90 }}\n        ></Image>\n      </View>\n      <Text style={styles.time}>Time Remaining : {timeLeft} seconds</Text>\n      <Text style={styles.score}>Your Smashed : {score} Moles!</Text>\n      <View style={styles.game}>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n      </View>\n    </ImageBackground>\n  ) : (\n    <View style={styles.gameOverContainer}>\n      <Image source={require(\"../assets/gameover.png\")}></Image>\n      <Text style={styles.finalScore}>You Smashed {score} Moles!</Text>\n      <TouchableOpacity style={styles.restartBtn} onPress={restartGame}>\n        <Image source={require(\"../assets/playagain.png\")}></Image>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n  },\n  game: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    width: 300,\n  },\n  time: {\n    marginBottom: 10,\n    marginTop: 90,\n    fontWeight: \"bold\",\n    fontSize: 20,\n    color: \"red\",\n  },\n  score: {\n    fontWeight: \"bold\",\n    fontSize: 20,\n    color: \"yellow\",\n  },\n  gameOverContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"black\",\n  },\n  finalScore: {\n    color: \"yellow\",\n    fontSize: 20,\n  },\n  restartBtn: {\n    backgroundColor: \"yellow\",\n    margin: 20,\n  },\n  playAgain: {\n    fontSize: 30,\n  },\n});\n\nexport default GameBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}