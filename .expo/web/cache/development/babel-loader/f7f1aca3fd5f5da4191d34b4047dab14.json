{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Square from \"./Square\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { clearScore } from \"../redux/scoreReducer\";\nimport { Audio } from 'expo-av';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar GameBoard = function GameBoard() {\n  var _useState = useState(10),\n    _useState2 = _slicedToArray(_useState, 2),\n    timeLeft = _useState2[0],\n    setTimeLeft = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isGameOver = _useState4[0],\n    setGameOver = _useState4[1];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    sound = _useState6[0],\n    setSound = _useState6[1];\n  var score = useSelector(function (state) {\n    return state;\n  });\n  var dispatch = useDispatch();\n  function playSound() {\n    return _playSound.apply(this, arguments);\n  }\n  function _playSound() {\n    _playSound = _asyncToGenerator(function* () {\n      console.log('Loading Sound');\n      var _yield$Audio$Sound$cr = yield Audio.Sound.createAsync(require(\"../assets/pokemon-battle.mp3\")),\n        sound = _yield$Audio$Sound$cr.sound;\n      setSound(sound);\n      console.log('Playing Sound');\n      yield sound.playAsync();\n    });\n    return _playSound.apply(this, arguments);\n  }\n  useEffect(function () {\n    return sound ? function () {\n      console.log('Unloading Sound');\n      sound.unloadAsync();\n    } : undefined;\n  }, [sound]);\n  useEffect(function () {\n    if (!timeLeft) {\n      return setGameOver(true);\n    } else {\n      var timerId = setInterval(function () {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n      return function () {\n        return clearInterval(timerId);\n      };\n    }\n  }, [timeLeft]);\n  function restartGame() {\n    setGameOver(false);\n    setTimeLeft(10);\n    dispatch(clearScore());\n  }\n  return !isGameOver ? _jsxs(ImageBackground, {\n    style: styles.container,\n    source: require(\"../assets/Grass_Type.png\"),\n    children: [_jsx(View, {\n      children: _jsx(Image, {\n        source: require(\"../assets/pokemon_font.png\"),\n        style: {\n          top: 90\n        }\n      })\n    }), _jsxs(Text, {\n      style: styles.time,\n      children: [\"Time Remaining : \", timeLeft, \" seconds\"]\n    }), _jsxs(Text, {\n      style: styles.score,\n      children: [\"Your Smashed : \", score.score, \" Moles!\"]\n    }), _jsxs(View, {\n      style: styles.game,\n      children: [_jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {}), _jsx(Square, {})]\n    })]\n  }) : _jsxs(View, {\n    style: styles.gameOverContainer,\n    children: [_jsx(Image, {\n      source: require(\"../assets/gameover.png\")\n    }), _jsxs(Text, {\n      style: styles.finalScore,\n      children: [\"You Smashed \", score.score, \" Moles!\"]\n    }), _jsx(TouchableOpacity, {\n      style: styles.restartBtn,\n      onPress: restartGame,\n      children: _jsx(Image, {\n        source: require(\"../assets/playagain.png\")\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\"\n  },\n  game: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    width: 300\n  },\n  time: {\n    marginBottom: 10,\n    marginTop: 90,\n    fontWeight: \"bold\",\n    fontSize: 20,\n    color: \"red\"\n  },\n  score: {\n    fontWeight: \"bold\",\n    fontSize: 20,\n    color: \"yellow\"\n  },\n  gameOverContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"black\"\n  },\n  finalScore: {\n    color: \"yellow\",\n    fontSize: 20\n  },\n  restartBtn: {\n    backgroundColor: \"yellow\",\n    margin: 20\n  },\n  playAgain: {\n    fontSize: 30\n  }\n});\nexport default GameBoard;","map":{"version":3,"names":["Square","React","useEffect","useState","useSelector","useDispatch","clearScore","Audio","GameBoard","timeLeft","setTimeLeft","isGameOver","setGameOver","sound","setSound","score","state","dispatch","playSound","console","log","Sound","createAsync","require","playAsync","unloadAsync","undefined","timerId","setInterval","clearInterval","restartGame","styles","container","top","time","game","gameOverContainer","finalScore","restartBtn","StyleSheet","create","flex","backgroundColor","alignItems","flexDirection","flexWrap","width","marginBottom","marginTop","fontWeight","fontSize","color","justifyContent","margin","playAgain"],"sources":["/Users/llu/Desktop/solo/Smash-A-Digglet/components/GameBoard.js"],"sourcesContent":["import {View,Text,StyleSheet,ImageBackground,Image,TouchableOpacity,} from \"react-native\";\nimport Square from \"./Square\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { clearScore } from \"../redux/scoreReducer\";\nimport { Audio } from 'expo-av';\n\nconst GameBoard = () => {\n  const [timeLeft, setTimeLeft] = useState(10);\n  const [isGameOver, setGameOver] = useState(false);\n  const [sound, setSound] = useState();\n  const score = useSelector((state) => state);\n  const dispatch = useDispatch()\n\n  async function playSound() {\n    console.log('Loading Sound');\n    const { sound } = await Audio.Sound.createAsync( require('../assets/pokemon-battle.mp3'));\n    setSound(sound);\n    console.log('Playing Sound');\n    await sound.playAsync();\n  }\n  \n  useEffect(() => {\n    return sound\n      ? () => {\n          console.log('Unloading Sound');\n          sound.unloadAsync();\n        }\n      : undefined;\n  }, [sound]);\n  \n  useEffect(() => {\n    if (!timeLeft) {\n      return setGameOver(true);\n    } else {\n      const timerId = setInterval(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n      return () => clearInterval(timerId);\n    }\n  }, [timeLeft]);\n\n  function restartGame() {\n    setGameOver(false);\n    setTimeLeft(10);\n    dispatch(clearScore())\n  }\n\n  return !isGameOver ? (\n    <ImageBackground\n      style={styles.container}\n      source={require(\"../assets/Grass_Type.png\")}\n    >\n      <View>\n        <Image\n          source={require(\"../assets/pokemon_font.png\")}\n          style={{ top: 90 }}\n        ></Image>\n      </View>\n      <Text style={styles.time}>Time Remaining : {timeLeft} seconds</Text>\n      <Text style={styles.score}>Your Smashed : {score.score} Moles!</Text>\n      <View style={styles.game}>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n        <Square></Square>\n      </View>\n    </ImageBackground>\n  ) : (\n    <View style={styles.gameOverContainer}>\n      <Image source={require(\"../assets/gameover.png\")}></Image>\n      <Text style={styles.finalScore}>You Smashed {score.score} Moles!</Text>\n      <TouchableOpacity style={styles.restartBtn} onPress={restartGame}>\n        <Image source={require(\"../assets/playagain.png\")}></Image>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n  },\n  game: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    width: 300,\n  },\n  time: {\n    marginBottom: 10,\n    marginTop: 90,\n    fontWeight: \"bold\",\n    fontSize: 20,\n    color: \"red\",\n  },\n  score: {\n    fontWeight: \"bold\",\n    fontSize: 20,\n    color: \"yellow\",\n  },\n  gameOverContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"black\",\n  },\n  finalScore: {\n    color: \"yellow\",\n    fontSize: 20,\n  },\n  restartBtn: {\n    backgroundColor: \"yellow\",\n    margin: 20,\n  },\n  playAgain: {\n    fontSize: 30,\n  },\n});\n\nexport default GameBoard;\n"],"mappings":";;;;;;;;AACA,OAAOA,MAAM;AACb,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU;AACnB,SAASC,KAAK,QAAQ,SAAS;AAAC;AAAA;AAEhC,IAAMC,SAAS,GAAG,SAAZA,SAAS,GAAS;EACtB,gBAAgCL,QAAQ,CAAC,EAAE,CAAC;IAAA;IAArCM,QAAQ;IAAEC,WAAW;EAC5B,iBAAkCP,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA1CQ,UAAU;IAAEC,WAAW;EAC9B,iBAA0BT,QAAQ,EAAE;IAAA;IAA7BU,KAAK;IAAEC,QAAQ;EACtB,IAAMC,KAAK,GAAGX,WAAW,CAAC,UAACY,KAAK;IAAA,OAAKA,KAAK;EAAA,EAAC;EAC3C,IAAMC,QAAQ,GAAGZ,WAAW,EAAE;EAAA,SAEfa,SAAS;IAAA;EAAA;EAAA;IAAA,+BAAxB,aAA2B;MACzBC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,kCAAwBb,KAAK,CAACc,KAAK,CAACC,WAAW,CAAEC,OAAO,gCAAgC,CAAC;QAAjFV,KAAK,yBAALA,KAAK;MACbC,QAAQ,CAACD,KAAK,CAAC;MACfM,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,MAAMP,KAAK,CAACW,SAAS,EAAE;IACzB,CAAC;IAAA;EAAA;EAEDtB,SAAS,CAAC,YAAM;IACd,OAAOW,KAAK,GACR,YAAM;MACJM,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9BP,KAAK,CAACY,WAAW,EAAE;IACrB,CAAC,GACDC,SAAS;EACf,CAAC,EAAE,CAACb,KAAK,CAAC,CAAC;EAEXX,SAAS,CAAC,YAAM;IACd,IAAI,CAACO,QAAQ,EAAE;MACb,OAAOG,WAAW,CAAC,IAAI,CAAC;IAC1B,CAAC,MAAM;MACL,IAAMe,OAAO,GAAGC,WAAW,CAAC,YAAM;QAChClB,WAAW,CAACD,QAAQ,GAAG,CAAC,CAAC;MAC3B,CAAC,EAAE,IAAI,CAAC;MACR,OAAO;QAAA,OAAMoB,aAAa,CAACF,OAAO,CAAC;MAAA;IACrC;EACF,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,SAASqB,WAAW,GAAG;IACrBlB,WAAW,CAAC,KAAK,CAAC;IAClBF,WAAW,CAAC,EAAE,CAAC;IACfO,QAAQ,CAACX,UAAU,EAAE,CAAC;EACxB;EAEA,OAAO,CAACK,UAAU,GAChB,MAAC,eAAe;IACd,KAAK,EAAEoB,MAAM,CAACC,SAAU;IACxB,MAAM,EAAET,OAAO,4BAA6B;IAAA,WAE5C,KAAC,IAAI;MAAA,UACH,KAAC,KAAK;QACJ,MAAM,EAAEA,OAAO,8BAA+B;QAC9C,KAAK,EAAE;UAAEU,GAAG,EAAE;QAAG;MAAE;IACZ,EACJ,EACP,MAAC,IAAI;MAAC,KAAK,EAAEF,MAAM,CAACG,IAAK;MAAA,gCAAmBzB,QAAQ;IAAA,EAAgB,EACpE,MAAC,IAAI;MAAC,KAAK,EAAEsB,MAAM,CAAChB,KAAM;MAAA,8BAAiBA,KAAK,CAACA,KAAK;IAAA,EAAe,EACrE,MAAC,IAAI;MAAC,KAAK,EAAEgB,MAAM,CAACI,IAAK;MAAA,WACvB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU,EACjB,KAAC,MAAM,KAAU;IAAA,EACZ;EAAA,EACS,GAElB,MAAC,IAAI;IAAC,KAAK,EAAEJ,MAAM,CAACK,iBAAkB;IAAA,WACpC,KAAC,KAAK;MAAC,MAAM,EAAEb,OAAO;IAA2B,EAAS,EAC1D,MAAC,IAAI;MAAC,KAAK,EAAEQ,MAAM,CAACM,UAAW;MAAA,2BAActB,KAAK,CAACA,KAAK;IAAA,EAAe,EACvE,KAAC,gBAAgB;MAAC,KAAK,EAAEgB,MAAM,CAACO,UAAW;MAAC,OAAO,EAAER,WAAY;MAAA,UAC/D,KAAC,KAAK;QAAC,MAAM,EAAEP,OAAO;MAA4B;IAAS,EAC1C;EAAA,EAEtB;AACH,CAAC;AAED,IAAMQ,MAAM,GAAGQ,UAAU,CAACC,MAAM,CAAC;EAC/BR,SAAS,EAAE;IACTS,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,MAAM;IACvBC,UAAU,EAAE;EACd,CAAC;EACDR,IAAI,EAAE;IACJS,aAAa,EAAE,KAAK;IACpBC,QAAQ,EAAE,MAAM;IAChBC,KAAK,EAAE;EACT,CAAC;EACDZ,IAAI,EAAE;IACJa,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,MAAM;IAClBC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;EACT,CAAC;EACDpC,KAAK,EAAE;IACLkC,UAAU,EAAE,MAAM;IAClBC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;EACT,CAAC;EACDf,iBAAiB,EAAE;IACjBK,IAAI,EAAE,CAAC;IACPE,UAAU,EAAE,QAAQ;IACpBS,cAAc,EAAE,QAAQ;IACxBV,eAAe,EAAE;EACnB,CAAC;EACDL,UAAU,EAAE;IACVc,KAAK,EAAE,QAAQ;IACfD,QAAQ,EAAE;EACZ,CAAC;EACDZ,UAAU,EAAE;IACVI,eAAe,EAAE,QAAQ;IACzBW,MAAM,EAAE;EACV,CAAC;EACDC,SAAS,EAAE;IACTJ,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEF,eAAe1C,SAAS"},"metadata":{},"sourceType":"module"}